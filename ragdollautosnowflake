if not game:IsLoaded() then
	game.Loaded:Wait()
end
if game.PlaceId ~= 5945728589 then
	game:GetService("TeleportService"):Teleport(5945728589, game.Players.LocalPlayer)
	local queueonteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
	if queueonteleport then
		queueonteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/bardium/random/main/ragdollautosnowflake'))()")
	end
end

repeat task.wait(.25) until game.Players.LocalPlayer ~= nil
repeat task.wait(.25) until game.Players.LocalPlayer.Character ~= nil
repeat task.wait(.25) until game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
repeat task.wait(.25) until game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").RootPart ~= nil
local forcefield = game.Players.LocalPlayer.Character:WaitForChild("Torso"):WaitForChild("CenterCore"):WaitForChild("Forcefield")
repeat task.wait(.25) until forcefield.Enabled == false
local dropsFolder = game:GetService("Workspace"):WaitForChild("Drops")
for i = 0, 10, 1 do
	task.wait(.5)
	if game.Players.LocalPlayer.Character ~= nil then
		if game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid") then
			if game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").RootPart ~= nil then
				for _, drop in pairs(dropsFolder:GetChildren()) do
					if drop:IsA("BasePart") and drop.Name == "Snowflake" and drop:FindFirstChildWhichIsA("BasePart", true) then
						game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").RootPart.CFrame = drop.CFrame
						task.wait()
					end
				end
			end
		end
	end
end
while task.wait() do
	local queueonteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
	if queueonteleport then
		queueonteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/bardium/random/main/ragdollautosnowflake'))()")
	end
	local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
	if httprequest then
		local servers = {}
		local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100", game.PlaceId)})
		local body = game:GetService("HttpService"):JSONDecode(req.Body)
		if body and body.data then
			for i, v in next, body.data do
				if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
					table.insert(servers, 1, v.id)
				end 
			end
		end
		if #servers > 0 then
			game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game:GetService("Players").LocalPlayer)
		else
			if body and body.data then
				for i, v in next, body.data do
					if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
						table.insert(servers, 1, v.id)
					end 
				end
			end
			if #servers > 0 then
				game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game:GetService("Players").LocalPlayer)
			end
		end
	end
end
