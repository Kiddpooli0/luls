if not game:IsLoaded() then
	game.Loaded:Wait()
end

if game.PlaceId ~= 6447798030 then
	return
end

local rings = game:GetService("Workspace"):WaitForChild("Map"):WaitForChild("FunctionalBuildings"):WaitForChild("RingSpawners")

repeat task.wait() until game.Players.LocalPlayer.Character ~= nil

local rootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")

while task.wait() do
    local transparentParts = {}
    
    for index, instance in ipairs(rings:GetDescendants()) do
        if instance:IsA("BasePart") then
            if instance.Name == "ring" then
                if instance.Transparency ~= 1 then
                    task.wait()
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = instance.CFrame
                else
                    table.insert(transparentParts, instance.Name)
                end
            end
        end
    end
    if (#transparentParts) > 160 then
        local queueonteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
        queueonteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/bardium/random/main/funkyfridayautocollectrings'))()")
    	local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
    	if httprequest then
    		local servers = {}
    		local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100", game.PlaceId)})
    		local body = game:GetService("HttpService"):JSONDecode(req.Body)
    		if body and body.data then
    			for i, v in next, body.data do
    				if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
    					table.insert(servers, 1, v.id)
    				end 
    			end
    		end
    		if #servers > 0 then
    			print("tried serverhopping")
    			game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game:GetService("Players").LocalPlayer)
    		else
    			if body and body.data then
    				for i, v in next, body.data do
    					if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
    						table.insert(servers, 1, v.id)
    					end 
    				end
    			end
    			if #servers > 0 then
    				print("tried serverhopping")
    				game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game:GetService("Players").LocalPlayer)
    			end
    		end
    	end
    end
end
